diff -pru --exclude=auto --exclude='*.lo' --exclude='*.o' --exclude=Makefile --exclude=macros host-rpm-5.4.10.p-orig/lib/depends.c host-rpm-5.4.10/lib/depends.c
--- host-rpm-5.4.10.p-orig/lib/depends.c	2012-11-27 15:53:41.969544473 -0800
+++ host-rpm-5.4.10/lib/depends.c	2012-11-29 15:53:45.986356448 -0800
@@ -1492,6 +1492,27 @@ retry:
 	}
     }
 
+#if defined(RPM_VENDOR_CROSSRPM)
+    {
+        // When staging an install using --prefix, various dependencies fail to match, most of which can be
+        // suppressed by setting the _check_dirname_deps and _check_symlink_deps macros to '0'.  Unfortunately
+        // this won't handle the host executable files that are needed to be run on the build machine by the
+        // scriplets.  Fortunately these dependencies are all named as the full path to the executable that
+        // needs to be run.  (This means that the paths begin with '/').  Other file dependencies only use the
+        // filename (without full path) in the dependency name.  So we check for the macro cleared, only care
+        // about this while adding, and check for the first character of the name to be '/'.
+        int check_host_exec_deps = rpmExpandNumeric("%{?_check_host_exec_deps}%{?!_check_host_exec_deps:1}");
+        if (!check_host_exec_deps) {
+            if ((adding == 1) && (rpmdsN(dep)[0] == '/')) {
+                //fprintf(stderr, "%s#%d %s() - ts=%p dep=%p ts->solveData=%p N %s Type %s EVR %s F 0x%x\n",
+                //    __FILE__, __LINE__, __FUNCTION__, ts, dep, ts->solveData, rpmdsN(dep), rpmdsType(dep), rpmdsEVR(dep), rpmdsFlags(dep));
+                rpmlog(RPMLOG_INFO,_("No _check_host_exec_deps: ignoring dependency: %s\n"), rpmdsN(dep));
+                goto exit;
+            }
+        }
+    }
+#endif
+
 unsatisfied:
     if (Flags & RPMSENSE_MISSINGOK) {
 	rc = 0;	/* dependency is unsatisfied, but just a hint. */
@@ -1575,7 +1596,7 @@ static int checkPackageDeps(rpmts ts, co
     int terminate = 2;		/* XXX terminate if rc >= terminate */
     int rc;
     int ourrc = 0;
-#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
+#if defined(RPM_VENDOR_CROSSRPM) || defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
     int dirname_deps;
     int symlink_deps;
 #endif
@@ -1654,7 +1675,7 @@ static int checkPackageDeps(rpmts ts, co
 	}
     }
 
-#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
+#if defined(RPM_VENDOR_CROSSRPM) || defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
     dirname_deps = rpmExpandNumeric("%{?_check_dirname_deps}%{?!_check_dirname_deps:1}");
     if (dirname_deps) {
 #endif
@@ -1698,7 +1719,7 @@ static int checkPackageDeps(rpmts ts, co
 	    /*@switchbreak@*/ break;
 	}
     }
-#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
+#if defined(RPM_VENDOR_CROSSRPM) || defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
     }
 
     symlink_deps = rpmExpandNumeric("%{?_check_symlink_deps}%{?!_check_symlink_deps:1}");
@@ -1746,7 +1767,7 @@ static int checkPackageDeps(rpmts ts, co
 	    /*@switchbreak@*/ break;
 	}
     }
-#if defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
+#if defined(RPM_VENDOR_CROSSRPM) || defined(RPM_VENDOR_MANDRIVA) || defined(RPM_VENDOR_ARK) || defined(RPM_OPTIONAL_DIRNAME_AND_SYMLINK_DEPS) /* optional-dirname-and-symlink-deps */
     }
 #endif    
 
